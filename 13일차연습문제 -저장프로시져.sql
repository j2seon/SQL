--13일차 연습문제

--1. 각 부서별로 최소 급여, 최대급여, 평균급여를 출력하는 저장 프로시져를 생성하시오.
        --여러개가 나오기때문에 커서가 필요하다.
SET SERVEROUTPUT ON        
CREATE OR REPLACE PROCEDURE SP_EX1
IS -- 변수선언 , 커서 선언
    V_DNO EMPLOYEE.DNO%TYPE;
    V_MIN EMPLOYEE.SALARY%TYPE;
    V_MAX EMPLOYEE.SALARY%TYPE;
    V_AVG EMPLOYEE.SALARY%TYPE;
    
    CURSOR C1 IS
    SELECT DNO, MIN(SALARY), MAX(SALARY),AVG(SALARY)
    FROM EMPLOYEE
    GROUP BY DNO;
    
BEGIN 
    DBMS_OUTPUT.PUT_LINE('부서번호   최소급여    최대급여    평균급여');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------');
    OPEN C1; --커서 시작
    LOOP
        FETCH C1 INTO V_DNO,V_MIN,V_MAX,V_AVG;
        EXIT WHEN C1%NOTFOUND; --레코드가 존재하지 않을때 빠져나간다.
        DBMS_OUTPUT.PUT_LINE(V_DNO||'        '||V_MIN||'        '||V_MAX||'      '||V_AVG);
    END LOOP;
    CLOSE C1;
END;
/

EXEC SP_EX1;

    
-- 2.사원번호 사원이름 부서명 부서위치를 출력하는 저장프로시져를 생성하시오.
CREATE OR REPLACE PROCEDURE SP_EM
IS  
    CURSOR C2 IS 
    SELECT E.ENO ,E.ENAME , D.DNAME,D.LOC
    FROM EMPLOYEE E JOIN DEPARTMENT D
    ON E.DNO=D.DNO;
BEGIN
   FOR C2_RE IN C2 LOOP
        DBMS_OUTPUT.PUT_LINE(C2_RE.ENO||'  '||C2_RE.ENAME||'  '||C2_RE.DNAME||'  '||C2_RE.LOC);
    END LOOP;
END;
/
EXEC SP_EM;

CREATE OR REPLACE PROCEDURE SP_EX2
IS 
    V_ENO EMPLOYEE.ENO%TYPE;
    V_ENAME EMPLOYEE.ENO%TYPE;
    V_DNAME DEPARTMENT.DNAME%TYPE;
    V_LOC DEPARTMENT.LOC%TYPE;
    
    CURSOR C1 IS
    SELECT ENO, ENAME, DNAME, LOC
    FROM EMPLOYEE E ,DEPARTMENT D
    WHERE E.DNO = D.DNO;
BEGIN
    DBMS_OUTPUT.PUT_LINE('사원번호   사원이름    부서명    부서위치');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------');
    OPEN C1;
    LOOP
        FETCH C1 INTO V_ENO,V_ENAME,V_DNAME,V_LOC;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_ENO||'   '||V_ENAME||'   '||V_DNAME||'   '||V_LOC);
    END LOOP;
    CLOSE C1;
END;
/

EXEC SP_EX2;

--3. 급여를 입력 받아  입력받은 급여보다 높은 사원의 사원이름, 급여, 직책을 출력 하세요.

CREATE OR REPLACE PROCEDURE SP_EX3(
        V_SALARY IN EMPLOYEE.SALARY%TYPE
    )
IS
    V_EMP EMPLOYEE%ROWTYPE; --모든컬럼의 자료형
    CURSOR C1 IS
    SELECT ENAME, SALARY, JOB
    FROM EMPLOYEE
    WHERE SALARY>V_SALARY;
    
BEGIN
    DBMS_OUTPUT.PUT_LINE('사원이름   급여    직책');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------------');
    OPEN C1;
    LOOP
        FETCH C1 INTO V_EMP.ENAME, V_EMP.SALARY, V_EMP.JOB;
        EXIT WHEN C1%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(V_EMP.ENAME||' '|| V_EMP.SALARY||'  '|| V_EMP.JOB);
    END LOOP;
    CLOSE C1;
END;
/
EXEC SP_EX3(800);


CREATE OR REPLACE PROCEDURE SP_SALARY_b(
    V_SALARY EMPLOYEE.SALARY%TYPE
)
IS
CURSOR C3 IS 
SELECT ENAME, JOB ,SALARY
FROM EMPLOYEE
WHERE SALARY>V_SALARY;
BEGIN
    FOR C3_RE IN C3 LOOP
        DBMS_OUTPUT.PUT_LINE(C3_RE.ENAME||'  '||C3_RE.JOB||'  '||C3_RE.SALARY);    
    END LOOP;
END;
/
EXEC SP_SALARY_B(1500); 


--4.인풋매개변수 EMP_C10, DEPT_C10 두개를 입력받아 각각 EMPLOYEE,DEPARTMENT 테이블을 복사하는 저장츠로시저를 생성하세요
    --PL/SQL 내부에서 익명 블락에서 테이블을 생성 : GRANT CREATE TABLE TO PUBLIC ;< SYS계정에서 부여
    --저장프로시져 실행 후 권한 제거 해야함 (보안):REVOKE CREATE TABLE FROM PUBLIC;
CREATE OR REPLACE PROCEDURE SP_EX4(
   V_EMP IN VARCHAR2, V_DEPT IN VARCHAR2 --주의 : ; 넣으면안됨 ,크기지정 X
)
IS
    C1 INTEGER; --커서 변수선언
    V_SQL1 VARCHAR2(500); --테이블 생성 쿼리를 담을 변수
    V_SQL2 VARCHAR2(500);
BEGIN
    V_SQL1 := 'CREATE TABLE ' || V_EMP || 'AS SELECT * FROM EMPLOYEE';
    V_SQL2 := 'CREATE TABLE ' || V_DEPT || 'AS SELECT * FROM DEPARTMENT';
    
    C1:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(C1, V_SQL1 , DBMS_SQL.V7);
    DBMS_SQL.PARSE(C1, V_SQL2 , DBMS_SQL.V7);
    DBMS_SQL.CLOSE_CURSOR(C1);
END;
/
EXEC SP_EX4('EMPRR');
    

--5.DEPT_C10 테이블에서 DNO,DNAME,LOC 컬럼의 값을 인풋받아 인풋받은 값을 INSERT하는 저장프로시져를 생성하시오.
CREATE TABLE DEPT_C10
AS
SELECT * FROM DEPARTMENT;

CREATE OR REPLACE PROCEDURE SP_DEPTC10(
    V_DNO DEPT_C10.DNO%TYPE,
    V_DNAME DEPT_C10.DNAME%TYPE,
    V_LOC DEPT_C10.LOC%TYPE
)
IS 
BEGIN
    INSERT INTO DEPT_C10
    VALUES(V_DNO,V_DNAME,V_LOC);
END;
/

EXEC SP_DEPTC10(50,'HR','SEOUL');
EXEC SP_DEPTC10(60,'HR2','BUSAN');

CREATE OR REPLACE PROCEDURE SP_EX5(
 V_DNO IN DEPT_C10.DNO%TYPE, V_DNAME IN DEPT_C10.DNAME%TYPE, V_LOC IN DEPT_C10.LOC%TYPE
)
IS
BEGIN
    INSERT INTO DEPT_C10
    VALUES(V_DNO,V_DNAME,V_LOC);
    DBMS_OUTPUT.PUT_LINE('정상적으로 잘 입력 되었습니다.');    
END;
/
EXEC SP_DEPTC10(50,'HR','SEOUL');
EXEC SP_DEPTC10(60,'HR2','BUSAN');


--6.EMP_C10 테이블에서 모든 컬럼의 값을 인풋받아 인풋받은 값을 INSERT하는 저장프로시져를 생성하시오.
CREATE TABLE EMP_C10 
AS
SELECT * FROM EMPLOYEE;
DESC EMPLOYEE;
CREATE OR REPLACE PROCEDURE SP_EMPC10(
    V_ENO SP_EMPC10.ENO%TYPE,
    V_ENAME SP_EMPC10.ENAME%TYPE,
    V_JOB SP_EMPC10.JOB%TYPE,
    V_MANAGER SP_EMPC10.MANAGER%TYPE,
    V_HIREDATE SP_EMPC10.HIREDATE%TYPE,
    V_SALARY SP_EMPC10.SALARY%TYPE,
    V_COMMISSION SP_EMPC10.COMMISSION%TYPE,
    V_DNO SP_EMPC10.DNO%TYPE
)
IS
BEGIN
    INSERT INTO EMP_C10
    VALUES(V_ENO,ENAME,JOB,MANAGER,HIREDATE,SALARY,COMMISSION,DNO);
END;
/ 

EXEC EMP_C10( 8000,'SONG','PROGRAMER',7788,sysdate,4500,1000,50);

--7. dept_c10 테이블에서 4번문항의 부서번호 50의 HR 을 'PROGRAM' 으로 수정하는 저장프로시져를 생성하세요. 
--	<부서번호와 부서명을 인풋받아 수정하도록 하시오.> 
--	입력갑 : 50  PROGRAMMER 
CREATE OR REPLACE PROCEDURE SP_EX7(
    V_DNO IN DEPT_C10.DNO%TYPE,
    V_DNAME IN DEPT_C10.DNAME%TYPE
)
IS 
BEGIN
    UPDATE DEPT_C10
    SET DNAME = V_DNAME
    WHERE DNO = V_DNO;
    DBMS_OUTPUT.PUT_LINE('잘 업데이트 되었습니다.');
END;
/
SELECT * FROM DEPT_C10;


--8. emp_c10 테이블에서 사원번호를 인풋 받아 월급을 수정하는 저장 프로시져를 생성하시오. 
--	입력 값 : 8000  6000
CREATE OR REPLACE PROCEDURE SP_EX8(
    V_ENO IN EMP_C10.ENO%TYPE,
    V_SALARY IN EMP_C10.SALARY%TYPE
)
IS 
BEGIN
    UPDATE EMP_C10
    SET SALARY = V_SALARY
    WHERE ENO =V_ENO;
    DBMS_OUTPUT.PUT_LINE('잘 업데이트 되었습니다.');
END;
/
EXEC SP_EX8(800,1000);
SELECT * FROM EMP_C10;

--9. 위의 두 테이블명을 인풋 받아 두 테이블을 삭제하는 저장프로시져를 생성 하시오. 
CREATE OR REPLACE PROCEDURE SP_EX9(
   V_EMP IN VARCHAR2, V_DEPT IN VARCHAR2 --주의 : ; 넣으면안됨 ,크기지정 X
)
IS
    C1 INTEGER; --커서 변수선언
    V_SQL1 VARCHAR2(500); --테이블 생성 쿼리를 담을 변수
    V_SQL2 VARCHAR2(500);
BEGIN
    V_SQL1 := 'DROP TABLE ' || V_EMP ;
    V_SQL2 := 'DROP TABLE ' || V_DEPT ;    
    C1:=DBMS_SQL.OPEN_CURSOR;
    DBMS_SQL.PARSE(C1, V_SQL1 , DBMS_SQL.V7);
    DBMS_SQL.PARSE(C1, V_SQL2 , DBMS_SQL.V7);
    DBMS_SQL.CLOSE_CURSOR(C1);
END;
/
EXEC SP_EX9('EMP_C10','DEPT_C10');

DESC employee;

--10. 이름을 인풋 받아서 사원명, 급여, 부서번호, 부서명, 부서위치을 
-- OUT 파라미터에 넘겨주는 프로시저를 PL / SQL에서 호출

CREATE OR REPLACE PROCEDURE EX_10(
    V_ENAME IN EMPLOYEE.ENAME%TYPE,
    V_O_ENAME OUT EMPLOYEE.ENAME%TYPE,
    V_SALARY OUT EMPLOYEE.SALARY%TYPE,
    V_DNO OUT EMPLOYEE.DNO%TYPE,
    V_DNAME OUT DEPARTMENT.DNAME%TYPE,
    V_LOC OUT DEPARTMENT.LOC%TYPE
)
IS
BEGIN
    SELECT ENAME, SALARY , E.DNO, DNAME, LOC INTO V_O_ENAME,V_SALARY,V_DNO,V_DNAME,V_LOC
    FROM EMPLOYEE E, DEPARTMENT D
    WHERE E.DNO =D.DNO
    AND ENAME = V_ENAME; -- V_ENAME을 조건으로해서 
END;
/

DECLARE --OUT 파라미터 받을 변수 선언
   VAR_ENAME EMPLOYEE.ENAME%TYPE;
   V_SALARY EMPLOYEE.SALARY%TYPE;
   VAR_DNO EMPLOYEE.DNO%TYPE;
   VAR_DNAME DEPARTMENT.DNAME%TYPE;
   VAR_LOC DEPARTMENT.LOC%TYPE;
BEGIN
    EX_10('SCOTT', VAR_ENAME, V_SALARY, VAR_DNO, VAR_DNAME, VAR_LOC);
     DBMS_OUTPUT.PUT_LINE('사원명 급여 부서번호 부서명 부서위치');
     DBMS_OUTPUT.PUT_LINE('조회결과 : '||VAR_ENAME || '  '||V_SALARY||'  '||VAR_DNO||
                            '  '||VAR_DNAME||'  '||VAR_LOC);
END;
/

--11. 사원번호를 받아서 사원명, 급여, 직책,부서명,부서위치를 OUT 파라미터에 넘겨주는 프로시저를 PL / SQL에서 호출
CREATE OR REPLACE PROCEDURE EX_11(
    V_ENO IN EMPLOYEE.ENO%TYPE,
    V_ENAME OUT EMPLOYEE.ENAME%TYPE,
    V_SAL OUT EMPLOYEE.SALARY%TYPE,
    V_JOB OUT EMPLOYEE.JOB%TYPE,
    V_DNAME OUT DEPARTMENT.DNAME%TYPE,
    V_LOC OUT DEPARTMENT.LOC%TYPE
)
IS 
BEGIN
    SELECT ENAME, SALARY, JOB, DNAME, LOC INTO V_ENAME,V_SAL,V_JOB,V_DNAME,V_LOC
    FROM EMPLOYEE E , DEPARTMENT D
    WHERE E.DNO = D.DNO
    AND ENO = V_ENO;
END;
/
DECLARE --OUT 파라미터 받을 변수 선언
   VAR_ENAME EMPLOYEE.ENAME%TYPE;
   V_SALARY EMPLOYEE.SALARY%TYPE;
   VAR_JOB EMPLOYEE.JOB%TYPE;
   VAR_DNAME DEPARTMENT.DNAME%TYPE;
   VAR_LOC DEPARTMENT.LOC%TYPE;
BEGIN
    EX_11(7788,VAR_ENAME,V_SALARY,VAR_JOB,VAR_DNAME,VAR_LOC);
     DBMS_OUTPUT.PUT_LINE('사원명 급여 직책 부서명 부서위치');
     DBMS_OUTPUT.PUT_LINE('------------------------------');
     DBMS_OUTPUT.PUT_LINE(VAR_ENAME || '   '||V_SALARY||'  '||VAR_JOB||
                            '  '||VAR_DNAME||'  '||VAR_LOC);
END;
/






